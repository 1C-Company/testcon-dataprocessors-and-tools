
#Область ПрограммныйИнтерфейс

// Возвращает описание расчетного счета
//
// Параметры:
//    БИКБанка - Строка - Код банка из классификатора
//    ВалютаСчета - СправочникСсылка.Валюты - Валюта расчетного счета
//    ЮрФизЛицо - Перечисление.ЮридическоеФизическоеЛицо - Вид контрагента или организации
//    ЭтоГосОрган - Булево - Признак государственного органа
// Возвращаемое значение:
//    Структура - Структура
//
Функция СлучайныеРеквизитыРасчетногоСчета(БИКБанка, ВалютаСчета, ЮрФизЛицо, ЭтоГосОрган = Ложь) Экспорт
	
	СлучайныеРеквизитыРасчетногоСчета = Новый Структура;
	СлучайныеРеквизитыРасчетногоСчета.Вставить("БИКБанка",              "");
	СлучайныеРеквизитыРасчетногоСчета.Вставить("Банк",                  Справочники.Банки.ПустаяСсылка());
	СлучайныеРеквизитыРасчетногоСчета.Вставить("НаименованиеБанка",     "");
	СлучайныеРеквизитыРасчетногоСчета.Вставить("ЯвляетсяБанкомРФ",      Ложь);
	СлучайныеРеквизитыРасчетногоСчета.Вставить("НомерСчета",            "");
	СлучайныеРеквизитыРасчетногоСчета.Вставить("ВалютаДенежныхСредств", ВалютаСчета);
	СлучайныеРеквизитыРасчетногоСчета.Вставить("ИзмененБанковскийСчет", Истина);
	СлучайныеРеквизитыРасчетногоСчета.Вставить("ДеятельностьБанкаПрекращена", Ложь);
	
	// Заполним информацию о банке
	Если ЗначениеЗаполнено(БИКБанка) Тогда
		СлучайныеРеквизитыРасчетногоСчета.БИКБанка = БИКБанка;
	Иначе
		СлучайныеРеквизитыРасчетногоСчета.БИКБанка = "044525225"; //ПАО Сбербанк
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВалютаСчета) Тогда
		ВалютаСчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	СлучайныеРеквизитыРасчетногоСчета.Банк = Справочники.Банки.СсылкаНаБанк(СлучайныеРеквизитыРасчетногоСчета.БИКБанка);
	Если НЕ ЗначениеЗаполнено(СлучайныеРеквизитыРасчетногоСчета.Банк) Тогда
		БанкИзКлассификатора = БанкИзКлассификатора(СлучайныеРеквизитыРасчетногоСчета.БИКБанка);
		Если ЗначениеЗаполнено(БанкИзКлассификатора) Тогда
			СлучайныеРеквизитыРасчетногоСчета.Банк = БанкИзКлассификатора;
		Иначе
			// Если банк не определен, то формирование случайных реквизитов не имеет смысла.
			// Потому что номер счета в РФ формируется с учетом БИК Банка.
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(СлучайныеРеквизитыРасчетногоСчета.Банк);
	СлучайныеРеквизитыРасчетногоСчета.НаименованиеБанка           = РеквизитыБанка.Наименование;
	СлучайныеРеквизитыРасчетногоСчета.ДеятельностьБанкаПрекращена = РеквизитыБанка.ДеятельностьПрекращена;
	СлучайныеРеквизитыРасчетногоСчета.ЯвляетсяБанкомРФ            = РеквизитыБанка.ЯвляетсяБанкомРФ;
	Если НЕ РеквизитыБанка.ЯвляетсяБанкомРФ Тогда
		// Если банк не является банком РФ, то дальнейшее формирование случайных реквизитов не имеет смысла.
		// Потому что правила формирования номеров счетов для других стран могут отличаются от российских.
		Возврат СлучайныеРеквизитыРасчетногоСчета;
	КонецЕсли;
	
	Если ВалютаСчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		КодВалюты = "810";
	Иначе
		КодВалюты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаСчета, "Код");
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодВалюты) Тогда
			КодВалюты = "999";
		КонецЕсли;
	КонецЕсли;
	
	// Подготовим номер расчетного счета
	Если ЭтоФизическоеЛицо(ЮрФизЛицо) Тогда
		КодЮрФизЛица = "40802";
	ИначеЕсли ЭтоГосОрган Тогда
		КодЮрФизЛица = "40101";
	Иначе
		КодЮрФизЛица = "40702";
	КонецЕсли;
	
	МассивЧастейСлучайногоРасчетногоСчета = Новый Массив;
	МассивЧастейСлучайногоРасчетногоСчета.Добавить(КодЮрФизЛица); // 40702 или 40802
	МассивЧастейСлучайногоРасчетногоСчета.Добавить(КодВалюты);    // Например, 810
	МассивЧастейСлучайногоРасчетногоСчета.Добавить("0");          // Контрольный ключ
	МассивЧастейСлучайногоРасчетногоСчета.Добавить("9999");
	МассивЧастейСлучайногоРасчетногоСчета.Добавить(СтрокаСлучайныхЧисел(7));
	СлучайныйРасчетныйСчет = СтрСоединить(МассивЧастейСлучайногоРасчетногоСчета);
	
	// Рассчитаем контрольное число лицевого расчетного счета, 
	// см. Порядок расчета контрольного ключа в номере лицевого счета" (утв. Банком России 08.09.1997 N 515)
	// или БанковскиеПравила.ПроверитьКонтрольныйКлючВНомереБанковскогоСчета()
	УсловныйНомерКредитнойОрганизации     = Сред(СлучайныеРеквизитыРасчетногоСчета.БИКБанка, 7, 3);
	НомерСчетаДляРасчетаКонтрольногоЧисла = УсловныйНомерКредитнойОрганизации + СлучайныйРасчетныйСчет;
	СтрокаВесовыхКоэфициентов             = "71371371371371371371371";
	// Рассчитанные значения контрольных чисел, соответствующих полученному контрольному числу для случайного номера счета
	СтрокаВозможныхКонтрольныхЧисел = "0369258147";
	КонтрольноеЧисло = Сред(
		СтрокаВозможныхКонтрольныхЧисел,
		1 + КонтрольноеЧисло(НомерСчетаДляРасчетаКонтрольногоЧисла, СтрокаВесовыхКоэфициентов, 10),
		1);
	
	// Соберем расчетный счет, который проходит форматно-логический контроль
	МассивЧастейРасчетногоСчета = Новый Массив;
	МассивЧастейРасчетногоСчета.Добавить(Лев(СлучайныйРасчетныйСчет, 8));   // Например, 40702810
	МассивЧастейРасчетногоСчета.Добавить(КонтрольноеЧисло);                 // Рассчитанное контрольное число
	МассивЧастейРасчетногоСчета.Добавить(Прав(СлучайныйРасчетныйСчет, 11)); // 9999 и набор случайных символов
	
	СлучайныеРеквизитыРасчетногоСчета.НомерСчета = СтрСоединить(МассивЧастейРасчетногоСчета);
	
	Возврат СлучайныеРеквизитыРасчетногоСчета;
	
КонецФункции

// Возвращает описание идентификационных кодов контрагента или организации
//
// Параметры:
//    ЮрФизЛицо - Перечисление.ЮридическоеФизическоеЛицо - Вид контрагента или организации
//    ЭтоГосОрган - Булево - Признак государственного органа
// Возвращаемое значение:
//    Структура - Структура
//
Функция СлучайныеРеквизитыИдентификации(ЮрФизЛицо, ЭтоГосОрган = Ложь) Экспорт

	СлучайныеРеквизитыИдентификации = Новый Структура;
	СлучайныеРеквизитыИдентификации.Вставить("ИНН");
	СлучайныеРеквизитыИдентификации.Вставить("КПП");
	СлучайныеРеквизитыИдентификации.Вставить("ОГРН");
	СлучайныеРеквизитыИдентификации.Вставить("КодНалоговогоОргана", КодИнспекции());
	СлучайныеРеквизитыИдентификации.Вставить("РегистрационныйНомер");
	
	КодИнспекции = СлучайныеРеквизитыИдентификации.КодНалоговогоОргана;
	
	// ИНН и КПП
	Если ЭтоФизическоеЛицо(ЮрФизЛицо) Тогда
		ПерваяЧастьИНН              = КодИнспекции + СтрокаСлучайныхЧисел(6);
		КонтрольноеЧислоПервойЧасти = КонтрольноеЧисло(ПерваяЧастьИНН, "724A359468", 11);
		ВтораяЧастьИНН              = ПерваяЧастьИНН + КонтрольноеЧислоПервойЧасти;
		ИНН                         = ВтораяЧастьИНН + КонтрольноеЧисло(ВтораяЧастьИНН, "3724A359468", 11);
		КПП                         = "";
		ПризнакОГРН                 = 3;
		ДлинаНомераЗаписиОГРН       = 7;
	Иначе
		НачалоИНН    = КодИнспекции + СтрокаСлучайныхЧисел(5);
		ИНН          = НачалоИНН   + КонтрольноеЧисло(НачалоИНН, "24A359468", 11);
		КПП          = КодИнспекции + "01001";
		Если ЭтоГосОрган Тогда
			ПризнакОГРН  = 3;
		Иначе
			ПризнакОГРН  = 1;
		КонецЕсли;
		ДлинаНомераЗаписиОГРН = 5;
	КонецЕсли;
	СлучайныеРеквизитыИдентификации.ИНН = ИНН;
	СлучайныеРеквизитыИдентификации.КПП = КПП;
	
	// ОГРН
	МассивЧастиОГРН = Новый Массив;
	// 1 - это ЮрЛицо, 2 - это госучереждение, 3 - это ФизЛицо
	МассивЧастиОГРН.Добавить(ПризнакОГРН);
	// Например 16, если фирма образована в 2016 году
	МассивЧастиОГРН.Добавить(Формат(ТекущаяДатаСеанса(),"ДФ=гг"));
	// Код налоговой инспекции, в которой зарегистрирована фирма, например 7799
	МассивЧастиОГРН.Добавить(КодИнспекции);
	// Номер решения, согласно которому было организовано это предприятие
	МассивЧастиОГРН.Добавить(СтрокаСлучайныхЧисел(ДлинаНомераЗаписиОГРН));
	КонтрольноеЧислоОГРН = Число(СтрСоединить(МассивЧастиОГРН))%11;
	Если КонтрольноеЧислоОГРН = 10 Тогда
		КонтрольноеЧислоОГРН = 0;
	КонецЕсли;
	// Параметр дополнительной внутренней проверки ОГРН в налоговой службе
	МассивЧастиОГРН.Добавить(КонтрольноеЧислоОГРН);
	
	СлучайныеРеквизитыИдентификации.ОГРН                 = СтрСоединить(МассивЧастиОГРН);
	СлучайныеРеквизитыИдентификации.РегистрационныйНомер = СтрСоединить(МассивЧастиОГРН);
	
	Возврат СлучайныеРеквизитыИдентификации;
	
КонецФункции

// Возвращает случайные наименования компании
//
// Возвращаемое значение:
//    Структура - СписокНаименований
//
Функция СлучайныеНаименованияКомпании() Экспорт
	
	КоличествоНаименований    = 5;
	ГенераторСлучайныхЧисел   = Новый ГенераторСлучайныхЧисел();
	МакетСловаДляНаименований = ПолучитьОбщийМакет("СловаДляНаименований");
	
	МассивМакетов = Новый Массив;
	МассивМакетов.Добавить("Прилагательные");
	МассивМакетов.Добавить("Существительные");
	
	// Соберем из каждого макета по несколько слов.
	МассивыНаименований = Новый Массив;
	Для Каждого ИмяМакета Из МассивМакетов Цикл
		МассивНаименований = Новый Массив;
		ОбластьМакета = МакетСловаДляНаименований.ПолучитьОбласть(ИмяМакета);
		Верх = ОбластьМакета.Область().Верх;
		Низ  = ОбластьМакета.Область().Низ;
		Для Индекс = 1 по КоличествоНаименований Цикл
			НомерСлучайнойСтроки = ГенераторСлучайныхЧисел.СлучайноеЧисло(Низ, Верх);
			Область = ОбластьМакета.Область(НомерСлучайнойСтроки, 1, НомерСлучайнойСтроки, 1);
			МассивНаименований.Добавить(СокрЛП(Область.Текст));
		КонецЦикла;
		МассивыНаименований.Добавить(МассивНаименований);
	КонецЦикла;
	
	// Подготовим список наименований из массивов
	СписокНаименований = Новый СписокЗначений;
	Для Индекс = 0 По КоличествоНаименований - 1 Цикл
		МассивПодстрок = Новый Массив;
		Для Каждого МассивНаименования Из МассивыНаименований Цикл
			ПодстрокаНаименования = МассивНаименования.Получить(Индекс);
			МассивПодстрок.Добавить(ПодстрокаНаименования);
		КонецЦикла;
		СтрокаНаименования = СтрСоединить(МассивПодстрок, " ");
		СтрокаНаименования = КапитализироватьСтроку(СтрокаНаименования);
		СписокНаименований.Добавить(СтрокаНаименования);
	КонецЦикла;
	
	Возврат СписокНаименований;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтрокаСлучайныхЧисел(ДлинаСтроки)
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел();
	МассивСлучайныхЧисел    = Новый Массив;
	
	Для Индекс = 1 по ДлинаСтроки Цикл
		МассивСлучайныхЧисел.Добавить(ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 9));
	КонецЦикла;
	
	Возврат СтрСоединить(МассивСлучайныхЧисел);
	
КонецФункции

Функция КонтрольноеЧисло(СтрокаКода, КонтрольнаяСтрока, Делитель)
	
	Сумма = 0;
	Для Позиция = 1 по СтрДлина(СтрокаКода) Цикл
		СимволСтроки            = Сред(СтрокаКода, Позиция, 1);
		СимволКонтрольнойСтроки = Сред(КонтрольнаяСтрока, Позиция, 1);
		Если СимволКонтрольнойСтроки = "A" Тогда
			СимволКонтрольнойСтроки = 10;
		КонецЕсли;
		Сумма = Сумма + Число(СимволСтроки) * Число(СимволКонтрольнойСтроки);
	КонецЦикла;
	
	КонтрольноеЧисло = Сумма - (Цел(Сумма / Делитель) * Делитель);
	Если КонтрольноеЧисло = 10 Тогда
		КонтрольноеЧисло = 0;
	КонецЕсли;
	
	Возврат КонтрольноеЧисло;
	
КонецФункции

Функция ЭтоФизическоеЛицо(ЮрФизЛицо)

	Возврат (ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);

КонецФункции

Функция БанкИзКлассификатора(БИКБанка)
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("БИК", БИКБанка);
	БанкНайден = РаботаСБанкамиБП.УстановитьБанк(ДанныеЗаполнения);
	Если БанкНайден Тогда
		Возврат ДанныеЗаполнения.Банк;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КодИнспекции()

	КодИнспекции = "7799";
	
	// Возьмем код региона из основной организации пользователя.
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат КодИнспекции;
	КонецЕсли;
	
	СтруктураАдреса = УправлениеКонтактнойИнформациейБП.АдресСтруктурой(
		Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	Если ЗначениеЗаполнено(СтруктураАдреса.КодРегиона) Тогда
		КодИнспекции = СтруктураАдреса.КодРегиона + "99";
	КонецЕсли;
	
	Возврат КодИнспекции;
	
КонецФункции

Функция КапитализироватьСтроку(Строка)

	Строка = НРег(Строка);
	ПерваяБуква = ВРег(Лев(Строка, 1));
	Строка = Сред(Строка, 2, СтрДлина(Строка));
	Строка = ПерваяБуква + Строка;
	Возврат Строка;
	
КонецФункции

#КонецОбласти