#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ФормированиеТестовыхДанных_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(БанковскийСчет.ВалютаДенежныхСредств) Тогда
		ВалютаСчета = БанковскийСчет.ВалютаДенежныхСредств;
	Иначе
		ВалютаСчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	ПравоДоступаРедактированиеБанковскогоСчета = ПравоДоступа("Редактирование", Метаданные.Справочники.БанковскиеСчета);
	ПравоДоступаРедактированиеКонтрагента = ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты);
	Элементы.ВалютаСчета.Доступность = ПравоДоступаРедактированиеБанковскогоСчета И ПравоДоступаРедактированиеКонтрагента;
	
	РедактироватьВалютуСчета = ЯвляетсяБанкомРФ;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ЗаполнитьСлучайнымиРеквизитамиИдентификации();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		ЗаполнитьСлучайнымиРеквизитамиРасчетногоСчетаНаСервере();
	КонецЕсли;
	
	ЗаполнитьМассивНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеТестовыхДанных_ПриОткрытии(Отказ)
	
	Элементы.ВалютаСчета.Видимость = РедактироватьВалютуСчета;
	
	ЗапуститьПроверкуКонтрагента();
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		ПодобратьНаименование();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФормированиеТестовыхДанных_БанкПриИзменении(Элемент)
	
	ЗаполнитьСлучайнымиРеквизитамиРасчетногоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеТестовыхДанных_ВалютаСчетаПриИзменении(Элемент)
	
	ЗаполнитьСлучайнымиРеквизитамиРасчетногоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеТестовыхДанных_БанкОчистка(Элемент, СтандартнаяОбработка)
	
	БанковскийСчет.Банк = Неопределено;
	БанковскийСчет.НомерСчета = Неопределено;
	БИКБанка = "";
	
	БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
		БанковскийСчет, ЭтаФорма, БИКБанка, ЦветВыделенияНекорректногоЗначение, Истина);
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеТестовыхДанных_ВидПриИзменении(Элемент)
	
	Объект.ИНН = "";
	Объект.КПП = "";
	
	УстановитьВыполнениеПослеОбработчиковСобытия("ЗаполнитьПослеИзмененияВидаКонтрагента");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ФормированиеТестовыхДанных_ПодобратьНаименованиеПеред(Команда)
	
	ПодобратьНаименование();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаполнитьСлучайнымиРеквизитамиРасчетногоСчета()
	
	ЗаполнитьСлучайнымиРеквизитамиРасчетногоСчетаНаСервере();
	ОтобразитьРеквизитыРасчетногоСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРеквизитыРасчетногоСчета()
	
	БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
		БанковскийСчет, ЭтаФорма, БИКБанка, ЦветВыделенияНекорректногоЗначение, Истина);
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	
	Элементы.ВалютаСчета.Видимость = РедактироватьВалютуСчета;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлучайнымиРеквизитамиИдентификации()
	
	ИдентификационныеКоды = ФормированиеТестовыхДанных.СлучайныеРеквизитыИдентификации(
		Объект.ЮридическоеФизическоеЛицо, Объект.ГосударственныйОрган);
		
	ЗаполнитьЗначенияСвойств(Объект, ИдентификационныеКоды);
	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП , Объект.ИсторияКПП);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПослеИзмененияВидаКонтрагента(Элемент, ДополнительныеПараметры)
	
	ЗаполнитьПослеИзмененияВидаКонтрагентаНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
	БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
		БанковскийСчет, ЭтаФорма, БИКБанка, ЦветВыделенияНекорректногоЗначение, Истина);
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлучайнымиРеквизитамиРасчетногоСчетаНаСервере()
	
	СтруктураРасчетногоСчета = ФормированиеТестовыхДанных.СлучайныеРеквизитыРасчетногоСчета(
		БИКБанка,
		ВалютаСчета,
		Объект.ЮридическоеФизическоеЛицо,
		Объект.ГосударственныйОрган);
		
	Если СтруктураРасчетногоСчета = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтруктураРасчетногоСчета.НомерСчета) Тогда
		РедактироватьВалютуСчета = Ложь;
		Возврат;
	КонецЕсли;
	
	РедактироватьВалютуСчета = СтруктураРасчетногоСчета.ЯвляетсяБанкомРФ;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураРасчетногоСчета);
	ЗаполнитьЗначенияСвойств(БанковскийСчет, СтруктураРасчетногоСчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПослеИзмененияВидаКонтрагентаНаСервере()
	
	Если НЕ Объект.ОбособленноеПодразделение Тогда
		// Не заполняем реквизиты для обособленного подразделения,
		// Потому что ИНН берется от головного подразделения
		ЗаполнитьСлучайнымиРеквизитамиИдентификации();
		ПроверитьИННКППДубли(Истина, ЗначениеЗаполнено(Объект.КПП));
		
	КонецЕсли;
	
	ЗаполнитьСлучайнымиРеквизитамиРасчетногоСчетаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНаименование()
	
	Если СписокНаименований.Количество() = 0 Тогда
		ЗаполнитьМассивНаименований();
	КонецЕсли;
	
	Индекс = 0;
	Наименование = СписокНаименований.Получить(Индекс);
	Объект.Наименование       = Наименование;
	Объект.НаименованиеПолное = Наименование;
	СписокНаименований.Удалить(Индекс); // Удалим использованное наименование.
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивНаименований()
	
	СписокНаименований = ФормированиеТестовыхДанных.СлучайныеНаименованияКомпании();
	
КонецПроцедуры

#КонецОбласти